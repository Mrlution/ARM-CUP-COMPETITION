<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\m3_for_arty_a7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\m3_for_arty_a7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jul 17 16:17:33 2019
<BR><P>
<H3>Maximum Stack Usage =        688 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; recog &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[f]">GPIO1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">GPIO1_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[14]">DAPLinkFittedn</a> from main.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[11]">DAP_QSPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[13]">DAP_QSPI_XIP_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[12]">DAP_SPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[e]">GPIO0_Handler</a> from gpio.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[f]">GPIO1_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[10]">QSPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[86]">RecvHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[34]">Reset_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[84]">SendHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[30]">StubHandler</a> from xuartlite.o(.text) referenced from xuartlite.o(.text)
 <LI><a href="#[2f]">StubStatusHandler</a> from xspi.o(.text) referenced from xspi.o(.text)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2d]">SystemInit</a> from system_arty_cm3.o(.text) referenced from startup_arty_cm3.o(.text)
 <LI><a href="#[d]">UART0_Handler</a> from uart.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[17]">Unused_IRQ10</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[18]">Unused_IRQ11</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[19]">Unused_IRQ12</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1a]">Unused_IRQ13</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1b]">Unused_IRQ14</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1c]">Unused_IRQ15</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1d]">Unused_IRQ16</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1e]">Unused_IRQ17</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1f]">Unused_IRQ18</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[20]">Unused_IRQ19</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[21]">Unused_IRQ20</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[22]">Unused_IRQ21</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[23]">Unused_IRQ22</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[24]">Unused_IRQ23</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[25]">Unused_IRQ24</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[26]">Unused_IRQ25</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[27]">Unused_IRQ26</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[28]">Unused_IRQ27</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[29]">Unused_IRQ28</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2a]">Unused_IRQ29</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2b]">Unused_IRQ30</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2c]">Unused_IRQ31</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[15]">Unused_IRQ8</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[16]">Unused_IRQ9</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[35]">__main</a> from __main.o(!!!main) referenced from startup_arty_cm3.o(.text)
 <LI><a href="#[31]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[33]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[32]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[37]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[39]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12f]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[130]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[131]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3a]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3c]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[3e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[132]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[46]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[133]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[134]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[40]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[135]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[136]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[137]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[138]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[42]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[139]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[140]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[142]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[145]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[146]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[147]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[38]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[14f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[43]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[45]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[150]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[47]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; recog &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[151]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[127]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[152]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[153]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm3.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIO1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Unused_IRQ10</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Unused_IRQ11</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Unused_IRQ12</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Unused_IRQ13</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Unused_IRQ14</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Unused_IRQ15</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Unused_IRQ16</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Unused_IRQ17</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Unused_IRQ18</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Unused_IRQ19</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Unused_IRQ20</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Unused_IRQ21</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Unused_IRQ22</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Unused_IRQ23</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Unused_IRQ24</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Unused_IRQ25</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Unused_IRQ26</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Unused_IRQ27</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Unused_IRQ28</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Unused_IRQ29</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>Unused_IRQ30</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>Unused_IRQ31</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Unused_IRQ8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Unused_IRQ9</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4e]"></a>outbyte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, outbyte.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outnum
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outs
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padding
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[50]"></a>print</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>Xil_Assert</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xil_assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_DisableInterrupt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ClearStats
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ResetFifos
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StubHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_GetOptions
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetOptions
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetStatusHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_GetSlaveSelect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StubStatusHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetEnabled
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalDisable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_GetDataDirection
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetCallBack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetFrameCounter
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetFrameCounter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_CfgInitialize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_GetStats
</UL>

<P><STRONG><a name="[154]"></a>Xil_AssertSetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>XNullHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>xil_printf</STRONG> (Thumb, 484 bytes, Stack size 72 bytes, xil_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outnum
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outs
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_triple_frame_buffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Spi_Transfer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelRegisterDump
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSetup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSetup
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTransfer
</UL>

<P><STRONG><a name="[48]"></a>main</STRONG> (Thumb, 748 bytes, Stack size 360 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = main &rArr; recog &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_triple_frame_buffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boundary_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSPIInterrupts
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14]"></a>DAPLinkFittedn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAPLinkFittedn
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>InitialiseGPIO</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitialiseGPIO &rArr; XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>EnableGPIOInterrupts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EnableGPIOInterrupts &rArr; XGpio_InterruptEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>SetDAPLinkQSPIMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>

<P><STRONG><a name="[75]"></a>IncLeds</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IncLeds &rArr; XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[78]"></a>delays</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
</UL>

<P><STRONG><a name="[77]"></a>blink</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blink &rArr; XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delays
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>

<P><STRONG><a name="[e]"></a>GPIO0_Handler</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GPIO0_Handler &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncLeds
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>boundary_set</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = boundary_set &rArr; XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>InitialiseSPI</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitialiseSPI &rArr; XSpi_Initialize &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>DisableSPIInterrupts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisableSPIInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>InitQSPIBaseFlash</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>WriteQSPIBaseFlash</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>ReadQSPIBaseFlash</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReadQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>WriteSPIData</STRONG> (Thumb, 248 bytes, Stack size 112 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[10]"></a>QSPI0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DAP_QSPI0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAP_QSPI0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DAP_SPI0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAP_SPI0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DAP_QSPI_XIP_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAP_QSPI_XIP_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>RecvHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>SendHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>InitialiseUART</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitialiseUART &rArr; XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>CheckUARTRxBytes</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>EnableUARTInterrupts</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableUARTInterrupts &rArr; XUartLite_EnableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>UART0_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART0_Handler &rArr; XUartLite_InterruptHandler &rArr; ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>XGpio_CfgInitialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
</UL>

<P><STRONG><a name="[70]"></a>XGpio_SetDataDirection</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_SetDataDirection &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tspi_init
</UL>

<P><STRONG><a name="[8e]"></a>XGpio_GetDataDirection</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[76]"></a>XGpio_DiscreteRead</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_DiscreteRead &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncLeds
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bitwr
</UL>

<P><STRONG><a name="[71]"></a>XGpio_DiscreteWrite</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncLeds
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDAPLinkQSPIMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boundary_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tspi_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bitwr
</UL>

<P><STRONG><a name="[73]"></a>XGpio_InterruptGlobalEnable</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_InterruptGlobalEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
</UL>

<P><STRONG><a name="[90]"></a>XGpio_InterruptGlobalDisable</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[72]"></a>XGpio_InterruptEnable</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_InterruptEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
</UL>

<P><STRONG><a name="[92]"></a>XGpio_InterruptDisable</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[79]"></a>XGpio_InterruptClear</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[93]"></a>XGpio_InterruptGetEnabled</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[94]"></a>XGpio_InterruptGetStatus</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[95]"></a>XGpio_LookupConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, xgpio_sinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
</UL>

<P><STRONG><a name="[6f]"></a>XGpio_Initialize</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xgpio_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_LookupConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tspi_init
</UL>

<P><STRONG><a name="[96]"></a>XSpi_Abort</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
</UL>

<P><STRONG><a name="[7b]"></a>XSpi_Reset</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XSpi_Reset &rArr; XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[99]"></a>XSpi_CfgInitialize</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
</UL>

<P><STRONG><a name="[7c]"></a>XSpi_Start</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XSpi_Start &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tspi_init
</UL>

<P><STRONG><a name="[9a]"></a>XSpi_Stop</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[80]"></a>XSpi_Transfer</STRONG> (Thumb, 872 bytes, Stack size 48 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Spi_Transfer
</UL>

<P><STRONG><a name="[7e]"></a>XSpi_SetSlaveSelect</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XSpi_SetSlaveSelect &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Spi_Transfer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tspi_init
</UL>

<P><STRONG><a name="[9b]"></a>XSpi_GetSlaveSelect</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[9c]"></a>XSpi_SetStatusHandler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[9d]"></a>XSpi_InterruptHandler</STRONG> (Thumb, 630 bytes, Stack size 40 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[9e]"></a>XSpi_SetOptions</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, xspi_options.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XSpi_SetOptions &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tspi_init
</UL>

<P><STRONG><a name="[9f]"></a>XSpi_GetOptions</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, xspi_options.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[a0]"></a>XSpi_LookupConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, xspi_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XSpi_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
</UL>

<P><STRONG><a name="[7a]"></a>XSpi_Initialize</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xspi_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XSpi_Initialize &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_LookupConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tspi_init
</UL>

<P><STRONG><a name="[a1]"></a>XUartLite_CfgInitialize</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ClearStats
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>

<P><STRONG><a name="[a4]"></a>XUartLite_SendBuffer</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
</UL>

<P><STRONG><a name="[a6]"></a>XUartLite_Send</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[a7]"></a>XUartLite_ReceiveBuffer</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
</UL>

<P><STRONG><a name="[88]"></a>XUartLite_Recv</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XUartLite_Recv &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[a8]"></a>XUartLite_ResetFifos</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[a9]"></a>XUartLite_IsSending</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[87]"></a>XUartLite_SetRecvHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XUartLite_SetRecvHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[85]"></a>XUartLite_SetSendHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XUartLite_SetSendHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[8a]"></a>XUartLite_InterruptHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XUartLite_InterruptHandler &rArr; ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[ac]"></a>XUartLite_DisableInterrupt</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, xuartlite_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[89]"></a>XUartLite_EnableInterrupt</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_EnableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts
</UL>

<P><STRONG><a name="[4f]"></a>XUartLite_SendByte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xuartlite_l.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>

<P><STRONG><a name="[157]"></a>XUartLite_RecvByte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xuartlite_l.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>XUartLite_LookupConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, xuartlite_sinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>

<P><STRONG><a name="[83]"></a>XUartLite_Initialize</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xuartlite_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[af]"></a>XUartLite_GetStats</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, xuartlite_stats.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[a3]"></a>XUartLite_ClearStats</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, xuartlite_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
</UL>

<P><STRONG><a name="[67]"></a>run_triple_frame_buffer</STRONG> (Thumb, 1112 bytes, Stack size 40 bytes, vdma_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = run_triple_frame_buffer &rArr; WriteSetup &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetFrameCounter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_LookupConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IntrEnable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_CfgInitialize
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSetup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSetup
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>XAxiVdma_GetChannel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xaxivdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_WriteIntrHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ReadIntrHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_MaskS2MMErrIntr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IntrClear
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IntrGetPending
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IntrDisable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ClearDmaChannelErrors
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetDmaChannelErrors
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetFrmStore
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetFrmStore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetFrameCounter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaRegisterDump
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaStop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StartReadFrame
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StartWriteFrame
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetBdAddrs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StartFrmCntEnable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StopParking
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StartParking
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GenLockSourceSelect
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_FsyncSrcSelect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetLineBufThreshold
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IsBusy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ResetNotDone
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_Reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetFrameCounter
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IntrEnable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaStart
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaSetBufferAddr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_CfgInitialize
</UL>

<P><STRONG><a name="[b7]"></a>XAxiVdma_CfgInitialize</STRONG> (Thumb, 606 bytes, Stack size 32 bytes, xaxivdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = XAxiVdma_CfgInitialize &rArr; XAxiVdma_ChannelInit &rArr; XAxiVdma_BdSetNextPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelResetNotDone
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelReset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_Major
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_triple_frame_buffer
</UL>

<P><STRONG><a name="[c0]"></a>XAxiVdma_Reset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelReset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[c1]"></a>XAxiVdma_ResetNotDone</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelResetNotDone
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[c2]"></a>XAxiVdma_IsBusy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsBusy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[c4]"></a>XAxiVdma_CurrFrameStore</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>

<P><STRONG><a name="[c5]"></a>XAxiVdma_GetVersion</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>

<P><STRONG><a name="[c6]"></a>XAxiVdma_GetStatus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetStatus
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[c8]"></a>XAxiVdma_SetLineBufThreshold</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>

<P><STRONG><a name="[ca]"></a>XAxiVdma_FsyncSrcSelect</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>

<P><STRONG><a name="[cb]"></a>XAxiVdma_GenLockSourceSelect</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>

<P><STRONG><a name="[cc]"></a>XAxiVdma_StartParking</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartParking
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>

<P><STRONG><a name="[ce]"></a>XAxiVdma_StopParking</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStopParking
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[d0]"></a>XAxiVdma_StartFrmCntEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartFrmCntEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[d2]"></a>XAxiVdma_SetBdAddrs</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetBdAddrs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[d4]"></a>XAxiVdma_StartWriteFrame</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartTransfer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[d6]"></a>XAxiVdma_StartReadFrame</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartTransfer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[b3]"></a>XAxiVdma_DmaConfig</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, xaxivdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = XAxiVdma_DmaConfig &rArr; XAxiVdma_ChannelConfig &rArr; XAxiVdma_BdSetVsize
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSetup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSetup
</UL>

<P><STRONG><a name="[b4]"></a>XAxiVdma_DmaSetBufferAddr</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, xaxivdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = XAxiVdma_DmaSetBufferAddr &rArr; XAxiVdma_ChannelSetBufferAddr &rArr; XAxiVdma_BdSetAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetBufferAddr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSetup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSetup
</UL>

<P><STRONG><a name="[b1]"></a>XAxiVdma_DmaStart</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xaxivdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XAxiVdma_DmaStart &rArr; XAxiVdma_ChannelStart &rArr; XAxiVdma_ChannelIsRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTransfer
</UL>

<P><STRONG><a name="[da]"></a>XAxiVdma_DmaStop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStop
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[dc]"></a>XAxiVdma_DmaRegisterDump</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelRegisterDump
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[b8]"></a>XAxiVdma_SetFrameCounter</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, xaxivdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XAxiVdma_SetFrameCounter &rArr; XAxiVdma_ChannelSetFrmCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetFrmCnt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_triple_frame_buffer
</UL>

<P><STRONG><a name="[df]"></a>XAxiVdma_GetFrameCounter</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetFrmCnt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[e1]"></a>XAxiVdma_SetFrmStore</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsRunning
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>

<P><STRONG><a name="[e3]"></a>XAxiVdma_GetFrmStore</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>

<P><STRONG><a name="[e4]"></a>XAxiVdma_GetDmaChannelErrors</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelErrors
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[e6]"></a>XAxiVdma_ClearDmaChannelErrors</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ClearChannelErrors
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[bd]"></a>XAxiVdma_ChannelInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XAxiVdma_ChannelInit &rArr; XAxiVdma_BdSetNextPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetNextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetFrmStore
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_CfgInitialize
</UL>

<P><STRONG><a name="[bf]"></a>XAxiVdma_ChannelResetNotDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XAxiVdma_ChannelResetNotDone
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ResetNotDone
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_CfgInitialize
</UL>

<P><STRONG><a name="[be]"></a>XAxiVdma_ChannelReset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XAxiVdma_ChannelReset
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_Reset
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_CfgInitialize
</UL>

<P><STRONG><a name="[e2]"></a>XAxiVdma_ChannelIsRunning</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XAxiVdma_ChannelIsRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartParking
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStart
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetFrmStore
</UL>

<P><STRONG><a name="[c3]"></a>XAxiVdma_ChannelIsBusy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XAxiVdma_ChannelIsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartTransfer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStart
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetBdAddrs
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IsBusy
</UL>

<P><STRONG><a name="[e5]"></a>XAxiVdma_ChannelErrors</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetDmaChannelErrors
</UL>

<P><STRONG><a name="[e7]"></a>XAxiVdma_ClearChannelErrors</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ClearDmaChannelErrors
</UL>

<P><STRONG><a name="[c7]"></a>XAxiVdma_ChannelGetStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetStatus
</UL>

<P><STRONG><a name="[cd]"></a>XAxiVdma_ChannelStartParking</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StartParking
</UL>

<P><STRONG><a name="[cf]"></a>XAxiVdma_ChannelStopParking</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StopParking
</UL>

<P><STRONG><a name="[d1]"></a>XAxiVdma_ChannelStartFrmCntEnable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StartFrmCntEnable
</UL>

<P><STRONG><a name="[d3]"></a>XAxiVdma_ChannelSetBdAddrs</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetNextPtr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetBdAddrs
</UL>

<P><STRONG><a name="[d9]"></a>XAxiVdma_ChannelStart</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XAxiVdma_ChannelStart &rArr; XAxiVdma_ChannelIsRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsRunning
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartTransfer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaStart
</UL>

<P><STRONG><a name="[d8]"></a>XAxiVdma_ChannelSetBufferAddr</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XAxiVdma_ChannelSetBufferAddr &rArr; XAxiVdma_BdSetAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartTransfer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaSetBufferAddr
</UL>

<P><STRONG><a name="[d7]"></a>XAxiVdma_ChannelConfig</STRONG> (Thumb, 600 bytes, Stack size 48 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = XAxiVdma_ChannelConfig &rArr; XAxiVdma_BdSetVsize
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetVsize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetHsize
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetStride
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetFrmDly
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsRunning
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartTransfer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaConfig
</UL>

<P><STRONG><a name="[d5]"></a>XAxiVdma_ChannelStartTransfer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStart
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetBufferAddr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsBusy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StartReadFrame
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StartWriteFrame
</UL>

<P><STRONG><a name="[db]"></a>XAxiVdma_ChannelStop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaStop
</UL>

<P><STRONG><a name="[dd]"></a>XAxiVdma_ChannelRegisterDump</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaRegisterDump
</UL>

<P><STRONG><a name="[de]"></a>XAxiVdma_ChannelSetFrmCnt</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XAxiVdma_ChannelSetFrmCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetFrameCounter
</UL>

<P><STRONG><a name="[e0]"></a>XAxiVdma_ChannelGetFrmCnt</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetFrameCounter
</UL>

<P><STRONG><a name="[f4]"></a>XAxiVdma_ChannelEnableIntr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XAxiVdma_ChannelEnableIntr
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IntrEnable
</UL>

<P><STRONG><a name="[f5]"></a>XAxiVdma_ChannelDisableIntr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IntrDisable
</UL>

<P><STRONG><a name="[f6]"></a>XAxiVdma_ChannelGetPendingIntr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_WriteIntrHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ReadIntrHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IntrGetPending
</UL>

<P><STRONG><a name="[f7]"></a>XAxiVdma_ChannelIntrClear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_WriteIntrHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ReadIntrHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_IntrClear
</UL>

<P><STRONG><a name="[f8]"></a>XAxiVdma_ChannelGetEnabledIntr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xaxivdma_channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_WriteIntrHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ReadIntrHandler
</UL>

<P><STRONG><a name="[b9]"></a>XAxiVdma_IntrEnable</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, xaxivdma_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XAxiVdma_IntrEnable &rArr; XAxiVdma_ChannelEnableIntr
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelEnableIntr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_triple_frame_buffer
</UL>

<P><STRONG><a name="[f9]"></a>XAxiVdma_IntrDisable</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, xaxivdma_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelDisableIntr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[fa]"></a>XAxiVdma_IntrGetPending</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xaxivdma_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetPendingIntr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[fb]"></a>XAxiVdma_IntrClear</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, xaxivdma_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIntrClear
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[fc]"></a>XAxiVdma_MaskS2MMErrIntr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, xaxivdma_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[fd]"></a>XAxiVdma_ReadIntrHandler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, xaxivdma_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetEnabledIntr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIntrClear
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetPendingIntr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[fe]"></a>XAxiVdma_WriteIntrHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, xaxivdma_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetEnabledIntr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIntrClear
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetPendingIntr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetChannel
</UL>

<P><STRONG><a name="[ff]"></a>XAxiVdma_SetCallBack</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, xaxivdma_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b6]"></a>XAxiVdma_LookupConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, xaxivdma_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XAxiVdma_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_triple_frame_buffer
</UL>

<P><STRONG><a name="[103]"></a>index_select_1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, recognition.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Filter
</UL>

<P><STRONG><a name="[102]"></a>char_translate_no_y_data</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = char_translate_no_y_data
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Filter
</UL>

<P><STRONG><a name="[101]"></a>delta_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, recognition.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Filter
</UL>

<P><STRONG><a name="[100]"></a>Number_Filter</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Number_Filter &rArr; char_translate_no_y_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delta_width
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_translate_no_y_data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_select_1
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Number_Char
</UL>

<P><STRONG><a name="[104]"></a>Get_Number_Char</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Get_Number_Char &rArr; Number_Filter &rArr; char_translate_no_y_data
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>

<P><STRONG><a name="[105]"></a>delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, recognition.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
</UL>

<P><STRONG><a name="[6e]"></a>recog</STRONG> (Thumb, 522 bytes, Stack size 8 bytes, recognition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = recog &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Number_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>statistics</STRONG> (Thumb, 260 bytes, Stack size 20 bytes, recognition.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>char_translate</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, recognition.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>index_select</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, recognition.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>position_set</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = position_set
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>t_bitwr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = t_bitwr &rArr; XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
</UL>

<P><STRONG><a name="[10f]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tftspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
</UL>

<P><STRONG><a name="[108]"></a>tspi_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tspi_init &rArr; XSpi_Initialize &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetOptions
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
</UL>

<P><STRONG><a name="[109]"></a>Lcd_Spi_Transfer</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>

<P><STRONG><a name="[10a]"></a>LCD_Writ_Bus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Spi_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
</UL>

<P><STRONG><a name="[10b]"></a>LCD_WR_DATA8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LCD_WR_DATA8 &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bitwr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[10c]"></a>LCD_WR_DATA</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bitwr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
</UL>

<P><STRONG><a name="[10d]"></a>LCD_WR_REG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bitwr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[10e]"></a>LCD_Address_Set</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
</UL>

<P><STRONG><a name="[6a]"></a>Lcd_Init</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Lcd_Init &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tspi_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bitwr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>LCD_Clear</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LCD_Clear &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>LCD_ShowChinese</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, tftspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>

<P><STRONG><a name="[111]"></a>LCD_DrawPoint</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[112]"></a>LCD_Fill</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, tftspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint_big
</UL>

<P><STRONG><a name="[113]"></a>LCD_DrawPoint_big</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tftspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>

<P><STRONG><a name="[114]"></a>LCD_DrawLine</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, tftspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>

<P><STRONG><a name="[115]"></a>LCD_DrawRectangle</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, tftspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[116]"></a>Draw_Circle</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tftspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[6c]"></a>LCD_ShowChar</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[6d]"></a>LCD_ShowString</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tftspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus &rArr; Lcd_Spi_Transfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recog
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>mypow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tftspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[117]"></a>LCD_ShowNum</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, tftspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
</UL>

<P><STRONG><a name="[119]"></a>LCD_ShowNum1</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, tftspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
</UL>

<P><STRONG><a name="[11c]"></a>LCD_ShowPicture</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tftspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
</UL>

<P><STRONG><a name="[57]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[59]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>

<P><STRONG><a name="[63]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[124]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3b]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[3d]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[15b]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outnum
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outs
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outnum
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetBdAddrs
</UL>

<P><STRONG><a name="[121]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[15f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Number_Filter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelInit
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[162]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[120]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[32]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[125]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[165]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[166]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[44]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[49]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[167]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum1
</UL>

<P><STRONG><a name="[129]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum1
</UL>

<P><STRONG><a name="[12b]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[12a]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
</UL>

<P><STRONG><a name="[12c]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[51]"></a>padding</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, xil_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outnum
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outs
</UL>

<P><STRONG><a name="[52]"></a>outs</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, xil_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = outs &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padding
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>

<P><STRONG><a name="[54]"></a>outnum</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, xil_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padding
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>

<P><STRONG><a name="[56]"></a>getnum</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, xil_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getnum &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>

<P><STRONG><a name="[5c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAPLinkFittedn
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_QSPI_XIP_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SPI0_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_QSPI0_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI0_Handler
</UL>

<P><STRONG><a name="[7f]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
</UL>

<P><STRONG><a name="[7d]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSPIInterrupts
</UL>

<P><STRONG><a name="[8d]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xgpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>

<P><STRONG><a name="[91]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xgpio_intr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetEnabled
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
</UL>

<P><STRONG><a name="[8f]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xgpio_intr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalDisable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
</UL>

<P><STRONG><a name="[2f]"></a>StubStatusHandler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StubStatusHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xspi.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
</UL>

<P><STRONG><a name="[97]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
</UL>

<P><STRONG><a name="[30]"></a>StubHandler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StubHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xuartlite.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xuartlite.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ResetFifos
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
</UL>

<P><STRONG><a name="[a2]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xuartlite.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ResetFifos
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
</UL>

<P><STRONG><a name="[aa]"></a>SendDataHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendDataHandler &rArr; XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>

<P><STRONG><a name="[ab]"></a>ReceiveDataHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>

<P><STRONG><a name="[ad]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xuartlite_intr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_DisableInterrupt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
</UL>

<P><STRONG><a name="[b0]"></a>StartTransfer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, vdma_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = StartTransfer &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaStart
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_triple_frame_buffer
</UL>

<P><STRONG><a name="[b2]"></a>ReadSetup</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, vdma_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadSetup &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaSetBufferAddr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_triple_frame_buffer
</UL>

<P><STRONG><a name="[b5]"></a>WriteSetup</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, vdma_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WriteSetup &rArr; xil_printf &rArr; outnum &rArr; padding &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaSetBufferAddr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_DmaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_triple_frame_buffer
</UL>

<P><STRONG><a name="[ba]"></a>XAxiVdma_Major</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, xaxivdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XAxiVdma_Major
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_CfgInitialize
</UL>

<P><STRONG><a name="[bb]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xaxivdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetFrmStore
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StartParking
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GenLockSourceSelect
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_FsyncSrcSelect
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GetVersion
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_CurrFrameStore
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_Major
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_CfgInitialize
</UL>

<P><STRONG><a name="[c9]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xaxivdma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetFrmStore
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_StartParking
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_GenLockSourceSelect
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_FsyncSrcSelect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_SetLineBufThreshold
</UL>

<P><STRONG><a name="[e9]"></a>XAxiVdma_BdWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetVsize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetHsize
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetStride
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetFrmDly
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetAddr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetNextPtr
</UL>

<P><STRONG><a name="[e8]"></a>XAxiVdma_BdSetNextPtr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XAxiVdma_BdSetNextPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetBdAddrs
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelInit
</UL>

<P><STRONG><a name="[ee]"></a>XAxiVdma_BdSetAddr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XAxiVdma_BdSetAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetBufferAddr
</UL>

<P><STRONG><a name="[f0]"></a>XAxiVdma_BdRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetStride
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdSetFrmDly
</UL>

<P><STRONG><a name="[ef]"></a>XAxiVdma_BdSetFrmDly</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XAxiVdma_BdSetFrmDly
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdRead
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelConfig
</UL>

<P><STRONG><a name="[f1]"></a>XAxiVdma_BdSetStride</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XAxiVdma_BdSetStride
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdRead
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelConfig
</UL>

<P><STRONG><a name="[f2]"></a>XAxiVdma_BdSetHsize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XAxiVdma_BdSetHsize
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelConfig
</UL>

<P><STRONG><a name="[f3]"></a>XAxiVdma_BdSetVsize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XAxiVdma_BdSetVsize
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_BdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelConfig
</UL>

<P><STRONG><a name="[eb]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetEnabledIntr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetPendingIntr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelDisableIntr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelEnableIntr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ClearChannelErrors
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStopParking
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartParking
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartFrmCntEnable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetFrmCnt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelResetNotDone
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelRegisterDump
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsRunning
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIsBusy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelGetFrmCnt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelErrors
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelConfig
</UL>

<P><STRONG><a name="[ec]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xaxivdma_channel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelIntrClear
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelDisableIntr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelEnableIntr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ClearChannelErrors
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStopParking
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartParking
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStartFrmCntEnable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelStart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetFrmCnt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelSetBufferAddr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelReset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XAxiVdma_ChannelConfig
</UL>

<P><STRONG><a name="[106]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, position.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_set
</UL>

<P><STRONG><a name="[33]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
